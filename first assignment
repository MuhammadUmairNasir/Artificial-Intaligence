{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "54adf79c-19fb-4653-a32b-84ef428a06fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "muhammad umair nasir\n"
     ]
    }
   ],
   "source": [
    "#print hello world\n",
    "print(\"muhammad umair nasir\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1cb8f761-2698-4940-954b-f06e13c8e9fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number: 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "#input from user\n",
    "first = input(\"Enter a number:\")\n",
    "print(first)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b1ceb409-47c0-4a24-b5ed-0c63f6aaf11f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter first no: 5\n",
      "Enter second no: 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum is :  11\n"
     ]
    }
   ],
   "source": [
    "#sum of two numbers\n",
    "No_1 = int(input(\"Enter first no:\"))\n",
    "No_2 = int(input(\"Enter second no:\"))\n",
    "sum = No_1 + No_2\n",
    "print(\"Sum is : \", sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "21cb5bbe-fd2b-4472-9ce5-5821ff77300a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Artificial Intaligence\n"
     ]
    }
   ],
   "source": [
    "#concatenate two words\n",
    "word1 = \"Artificial\"\n",
    "word2 = \"Intaligence\"\n",
    "print(word1,word2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0c6e8bd3-4efb-430f-b8c7-6a6fec596873",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['cricket', 'football', 'hockey', 'football']\n",
      "<class 'list'>\n",
      "['cricket', 'kabbadi', 'hockey', 'football']\n",
      "[1, 'hockey', 2, 'cricket', 3, 'football']\n"
     ]
    }
   ],
   "source": [
    "#list\n",
    "list = [\"cricket\",\"football\",\"hockey\",\"football\"]\n",
    "print(list)\n",
    "print(type(list))\n",
    "#change in list\n",
    "list[1] = \"kabbadi\"\n",
    "print(list)\n",
    "#multiple datatypes in list\n",
    "Multi_data_type = [1,\"hockey\",2,\"cricket\",3,\"football\"]\n",
    "print(Multi_data_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9e406f9f-19ac-4a3a-9306-aeca51c0cfe3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['dog', ' cat', 'duck', 'camal']\n",
      "['dog', 'cow', ' cat', 'duck', 'camal']\n"
     ]
    }
   ],
   "source": [
    "#append method\n",
    "list = [\"dog\",\" cat\",\"duck\"]\n",
    "list.append(\"camal\")\n",
    "print(list)\n",
    "#insert method\n",
    "list.insert(1,\"cow\")\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fb2b43ed-162e-43d6-bf41-eb63fa856e4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('dog', 'cat', 'duck')\n",
      "<class 'tuple'>\n"
     ]
    }
   ],
   "source": [
    "#tuple\n",
    "tuple = (\"dog\",\"cat\",\"duck\")\n",
    "print(tuple)\n",
    "print(type(tuple))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "881b8722-8ae7-4c53-864a-85b6c9eec510",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "#Two methods of tuple\n",
    "tuple = (\"dog\",\"cat\",\"duck\",\"cat\",\"camal\",\"cat\",\"duck\")\n",
    "#count method\n",
    "count = tuple.count(\"cat\")\n",
    "print(count)\n",
    "#index number\n",
    "index_number = tuple.index(\"cat\")\n",
    "print(index_number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86e5ca02-e806-41a9-b293-0e4e1eaa8635",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
